# -*- coding: utf-8 -*-
"""day_77.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1axMQLIQfHTaJq9PqDYUvtCJPGN6FPp8D
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import misc
from PIL import Image

mystery_array = np.array([[[0, 1, 2, 3],
                           [4, 5, 6, 7]],

                         [[7, 86, 6, 98],
                          [5, 1, 0, 4]],

                          [[5, 36, 32, 48],
                           [97, 0, 27, 18]]])
# Challenge

# How many dimensions does the array below have?
mystery_array.ndim
# What is its shape (i.e., how many elements are along each axis)?
mystery_array.shape
# Try to access the value 18 in the last line of code.
mystery_array[2,1,3]
# Try to retrieve a 1-dimensional vector with the values [97, 0, 27, 18]
mystery_array[2,1,:]
# Try to retrieve a (3,2) matrix with the values [[ 0, 4], [ 7, 5], [ 5, 97]]
mystery_array[:,:,0]

# Use .arange()to createa a vector a with values ranging from 10 to 29.
a = np.arange(10,30)
a

# Challenge 2
# Use Python slicing techniques on a to:

# Create an array containing only the last 3 values of a
a[-3:]
# Create a subset with only the 4th, 5th, and 6th values
a[3:6]
# Create a subset of a containing all the values except for the first 12 (i.e., [22, 23, 24, 25, 26, 27, 28, 29])
a[12:]
# Create a subset that only contains the even numbers (i.e, every second number)
a[::2]

# Challenge 3
# Reverse the order of the values in a, so that the first element comes last:
reverse_a = np.flip(a)
reverse_a

# Challenge 4
# Print out all the indices of the non-zero elements in this array: [6,0,9,0,0,5,0]

b = np.array([6,0,9,0,0,5,0])
nz_indices = np.nonzero(b)
nz_indices

#Challenge 5
# Use NumPy to generate a 3x3x3 array with random numbers
z = np.random.random((3,3,3))
z.shape

##Challenge 6
# Use .linspace() to create a vector x of size 9 with values spaced out evenly between 0 to 100 (both included).
x = np.linspace(0, 100, num=9)
x.shape

# #Challenge 7
# Use .linspace() to create another vector y of size 9 with values between -3 to 3 (both included).
# Then plot x and y on a line chart using Matplotlib.

y = np.linspace(-3, 3, num=9)
plt.plot(x, y)
plt.show()

# Challenge 8
# Use NumPy to generate an array called noise with shape 128x128x3 that has random values.
# Then use Matplotlib's .imshow() to display the array as an image.

# The random values will be interpreted as the RGB colours for each pixel.

noise = np.random.random((128,128,3))
plt.imshow(noise)

a1 = np.array([[1, 3],
               [0, 1],
               [6, 2],
               [9, 7]])

b1 = np.array([[4, 1, 3],
               [5, 8, 5]])


# Challenge: Let's multiply a1 with b1. Looking at the Wikipedia example above, work out the values for c12 and c33 on paper.
# Then use the .matmul() function or the @ operator to check your work.

c = np.matmul(a1, b1)
print(f'matix c has {c.shape[0]} rows and {c.shape[1]} columns]')
c

img = misc.face()
plt.imshow(img)

# Challenge
# What is the data type of img? Also, what is the shape of img and how many dimensions does it have? What is the resolution of the image?
print(f'this image could be understant as {type(img)} type')
print(f'Also, it is a n-darray with this shape {img.shape}')
print(f'it have {img.ndim} dimensions')

sRGB_array = img / 255

grey_vals = np.array([0.2126, 0.7152, 0.0722])

img_grey = sRGB_array @ grey_vals

plt.imshow(img_grey, cmap='grey')

#if we want to flip our image
plt.imshow(np.flip(img_grey), cmap='grey')

#if we want rotate our graph
plt.imshow(np.rot90(img_grey), cmap='grey')

#now we use a solar efect
img_solar = 255 - img
plt.imshow(img_solar)

#now i'll use my own image
my_img = Image.open('yummy_macarons.jpg')
img_array = np.array(my_img)

img_array.ndim

img_array.shape

plt.imshow(img_array)

#now i'll aplyy the grey effect in this image
sRGB = img_array / 255
grey_vals = np.array([0.2126, 0.7152, 0.0722])

img_array_grey = sRGB @ grey_vals

plt.imshow(img_array_grey, cmap='grey')

#now the solar efect
img_array_solar = 255 - img_array
plt.imshow(img_array_solar)

